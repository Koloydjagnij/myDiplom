// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using test.Data;

namespace test.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190327134608_10")]
    partial class _10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("test.Achievement", b =>
                {
                    b.Property<int>("IdAchievement")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_achievement");

                    b.Property<string>("NameAchievement")
                        .HasColumnName("name_achievement");

                    b.HasKey("IdAchievement");

                    b.ToTable("achievement");
                });

            modelBuilder.Entity("test.AppConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AppConfig");
                });

            modelBuilder.Entity("test.ApplicationToSpeciality", b =>
                {
                    b.Property<int>("IdEnrollee")
                        .HasColumnName("id_enrollee");

                    b.Property<int>("IdEntranceExam")
                        .HasColumnName("id_entrance_exam");

                    b.Property<int>("IdSpeciality")
                        .HasColumnName("id_speciality");

                    b.Property<DateTime?>("DateOfPassingExam")
                        .HasColumnName("date_of_passing_exam")
                        .HasColumnType("date");

                    b.Property<int?>("ExamMark")
                        .HasColumnName("exam_mark");

                    b.Property<string>("Groupe")
                        .HasColumnName("groupe");

                    b.Property<int>("IdTestType")
                        .HasColumnName("id_test_type");

                    b.Property<int?>("PriorityNumber")
                        .HasColumnName("priority_number");

                    b.HasKey("IdEnrollee", "IdEntranceExam", "IdSpeciality");

                    b.HasIndex("IdTestType");

                    b.HasIndex("IdEntranceExam", "IdSpeciality");

                    b.ToTable("application_to_speciality");
                });

            modelBuilder.Entity("test.Area", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_area");

                    b.Property<int?>("IdRegion")
                        .IsRequired()
                        .HasColumnName("id_region");

                    b.Property<string>("NameArea")
                        .HasColumnName("name_area");

                    b.HasKey("IdArea");

                    b.HasIndex("IdRegion");

                    b.HasIndex("NameArea", "IdRegion")
                        .IsUnique();

                    b.ToTable("area");
                });

            modelBuilder.Entity("test.City", b =>
                {
                    b.Property<int>("IdTown")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_town");

                    b.Property<int?>("IdArea")
                        .HasColumnName("id_area");

                    b.Property<string>("NameCity")
                        .HasColumnName("name_city");

                    b.HasKey("IdTown");

                    b.HasIndex("IdArea");

                    b.HasIndex("NameCity", "IdArea")
                        .IsUnique();

                    b.ToTable("city");
                });

            modelBuilder.Entity("test.Document", b =>
                {
                    b.Property<int>("IdDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_document");

                    b.Property<string>("NameDocument")
                        .HasColumnName("name_document");

                    b.HasKey("IdDocument");

                    b.ToTable("document");
                });

            modelBuilder.Entity("test.EducationalInstitution", b =>
                {
                    b.Property<int>("IdEducationalInstitution")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_educational_institution");

                    b.Property<int?>("IdTown")
                        .HasColumnName("id_town");

                    b.Property<string>("NameEducationalInstitution")
                        .HasColumnName("name_educational_institution");

                    b.HasKey("IdEducationalInstitution");

                    b.HasIndex("IdTown");

                    b.ToTable("educational_institution");
                });

            modelBuilder.Entity("test.EducationType", b =>
                {
                    b.Property<int>("IdEducationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_education_type");

                    b.Property<string>("NameEducationType")
                        .HasColumnName("name_education_type");

                    b.HasKey("IdEducationType");

                    b.ToTable("education_type");
                });

            modelBuilder.Entity("test.Enrollee", b =>
                {
                    b.Property<int>("IdEnrollee")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_enrollee");

                    b.Property<int?>("AdmitSsgt")
                        .HasColumnName("admit_ssgt");

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnName("arrival_date")
                        .HasColumnType("date");

                    b.Property<int?>("CardPpo")
                        .HasColumnName("card_ppo");

                    b.Property<int?>("Children")
                        .HasColumnName("children");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("date_of_birth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfDeduction")
                        .HasColumnName("date_of_deduction")
                        .HasColumnType("date");

                    b.Property<int>("IdCategoryMs")
                        .HasColumnName("id_category_ms");

                    b.Property<int>("IdEducationType")
                        .HasColumnName("id_education_type");

                    b.Property<int>("IdEducationalInstitution")
                        .HasColumnName("id_educational_institution");

                    b.Property<int>("IdFactOfProsecution")
                        .HasColumnName("id_fact_of_prosecution");

                    b.Property<int>("IdMaritalStatus")
                        .HasColumnName("id_marital_status");

                    b.Property<int>("IdMilitaryOffice")
                        .HasColumnName("id_military_office");

                    b.Property<int>("IdMilitaryRank")
                        .HasColumnName("id_military_rank");

                    b.Property<int>("IdMilitaryUnit")
                        .HasColumnName("id_military_unit");

                    b.Property<int>("IdNationality")
                        .HasColumnName("id_nationality");

                    b.Property<int>("IdPreemptiveRight")
                        .HasColumnName("id_preemptive_right");

                    b.Property<int>("IdReasonForDeduction")
                        .HasColumnName("id_reason_for_deduction");

                    b.Property<int>("IdSex")
                        .HasColumnName("id_sex");

                    b.Property<int>("IdSocialBackground")
                        .HasColumnName("id_social_background");

                    b.Property<int>("IdTown")
                        .HasColumnName("id_town");

                    b.Property<bool?>("InteernationalPassport")
                        .HasColumnName("inteernational_passport");

                    b.Property<bool?>("LiveInCamp")
                        .HasColumnName("live_in_camp");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("NotesEducationalInstitution")
                        .HasColumnName("notes_educational_institution");

                    b.Property<int?>("NumOfPersonalFile")
                        .HasColumnName("num_of_personal_file");

                    b.Property<string>("OtherNotes")
                        .HasColumnName("other_notes");

                    b.Property<DateTime?>("PassportIssueDate")
                        .HasColumnName("passport_issue_date")
                        .HasColumnType("date");

                    b.Property<string>("PassportIssuedBy")
                        .HasColumnName("passport_issued_by");

                    b.Property<int?>("PassportNumber")
                        .HasColumnName("passport_number");

                    b.Property<int?>("PassportSeries")
                        .HasColumnName("passport_series");

                    b.Property<string>("PassportUnitCode")
                        .HasColumnName("passport_unit_code");

                    b.Property<string>("Patronymic")
                        .HasColumnName("patronymic")
                        .HasColumnType("char(18)");

                    b.Property<int?>("PersonalNumberMs")
                        .HasColumnName("personal_number_ms");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnName("place_of_birth");

                    b.Property<string>("StockPositionMs")
                        .HasColumnName("stock_position_ms");

                    b.Property<string>("Surname")
                        .HasColumnName("surname");

                    b.Property<DateTime?>("YearOfEndingEducation")
                        .HasColumnName("year_of_ending_education")
                        .HasColumnType("date");

                    b.HasKey("IdEnrollee");

                    b.HasIndex("IdCategoryMs");

                    b.HasIndex("IdEducationType");

                    b.HasIndex("IdEducationalInstitution");

                    b.HasIndex("IdFactOfProsecution");

                    b.HasIndex("IdMaritalStatus");

                    b.HasIndex("IdMilitaryOffice");

                    b.HasIndex("IdMilitaryRank");

                    b.HasIndex("IdMilitaryUnit");

                    b.HasIndex("IdNationality");

                    b.HasIndex("IdPreemptiveRight");

                    b.HasIndex("IdReasonForDeduction");

                    b.HasIndex("IdSex");

                    b.HasIndex("IdSocialBackground");

                    b.HasIndex("IdTown");

                    b.ToTable("enrollee");
                });

            modelBuilder.Entity("test.EnrolleeAchievement", b =>
                {
                    b.Property<int>("IdEnrollee")
                        .HasColumnName("id_enrollee");

                    b.Property<int>("IdAchievement")
                        .HasColumnName("id_achievement");

                    b.Property<int?>("Priority")
                        .HasColumnName("priority");

                    b.HasKey("IdEnrollee", "IdAchievement");

                    b.HasIndex("IdAchievement");

                    b.ToTable("enrollee_achievement");
                });

            modelBuilder.Entity("test.EnrolleeDocuments", b =>
                {
                    b.Property<int>("IdEnrollee")
                        .HasColumnName("id_enrollee");

                    b.Property<int>("IdDocument")
                        .HasColumnName("id_document");

                    b.Property<DateTime?>("LoadDate")
                        .HasColumnName("load_date")
                        .HasColumnType("date");

                    b.Property<bool?>("PresenceInPersonalFile")
                        .HasColumnName("presence_in_personal_file");

                    b.HasKey("IdEnrollee", "IdDocument");

                    b.HasIndex("IdDocument");

                    b.ToTable("enrollee_documents");
                });

            modelBuilder.Entity("test.EntranceExams", b =>
                {
                    b.Property<int>("IdEntranceExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_entrance_exam");

                    b.Property<string>("NameEntranceExam")
                        .HasColumnName("name_entrance_exam");

                    b.Property<bool?>("Necessarily")
                        .HasColumnName("necessarily");

                    b.HasKey("IdEntranceExam");

                    b.ToTable("entrance_exams");
                });

            modelBuilder.Entity("test.ExamForSpeciality", b =>
                {
                    b.Property<int>("IdEntranceExam")
                        .HasColumnName("id_entrance_exam");

                    b.Property<int>("IdSpeciality")
                        .HasColumnName("id_speciality");

                    b.HasKey("IdEntranceExam", "IdSpeciality");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("exam_for_speciality");
                });

            modelBuilder.Entity("test.FactOfProsecution", b =>
                {
                    b.Property<int>("IdFactOfProsecution")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_fact_of_prosecution");

                    b.Property<string>("NameFactOfProsecution")
                        .HasColumnName("name_fact_of_prosecution");

                    b.HasKey("IdFactOfProsecution");

                    b.ToTable("fact_of_prosecution");
                });

            modelBuilder.Entity("test.Family", b =>
                {
                    b.Property<int>("IdParent")
                        .HasColumnName("id_parent");

                    b.Property<int>("IdEnrollee")
                        .HasColumnName("id_enrollee");

                    b.Property<int>("IdFamilyType")
                        .HasColumnName("id_family_type");

                    b.HasKey("IdParent", "IdEnrollee");

                    b.HasIndex("IdEnrollee");

                    b.HasIndex("IdFamilyType");

                    b.ToTable("family");
                });

            modelBuilder.Entity("test.FamilyType", b =>
                {
                    b.Property<int>("IdFamilyType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_family_type");

                    b.Property<string>("NameFamilyType")
                        .HasColumnName("name_family_type");

                    b.HasKey("IdFamilyType");

                    b.ToTable("family_type");
                });

            modelBuilder.Entity("test.MaritalStatus", b =>
                {
                    b.Property<int>("IdMaritalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_marital_status");

                    b.Property<string>("NameMaritalStatus")
                        .HasColumnName("name_marital_status");

                    b.HasKey("IdMaritalStatus");

                    b.ToTable("marital_status");
                });

            modelBuilder.Entity("test.MilitaryDistrict", b =>
                {
                    b.Property<int>("IdMilitaryDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_military_district");

                    b.Property<string>("NameMilitaryDistrict")
                        .HasColumnName("name_military_district");

                    b.HasKey("IdMilitaryDistrict");

                    b.ToTable("military_district");
                });

            modelBuilder.Entity("test.MilitaryOffice", b =>
                {
                    b.Property<int>("IdMilitaryOffice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_military_office");

                    b.Property<int>("IdTown")
                        .HasColumnName("id_town");

                    b.Property<string>("MilitaryDistrict")
                        .HasColumnName("military_district");

                    b.Property<string>("NameMilitaryOffice")
                        .HasColumnName("name_military_office");

                    b.Property<string>("Status")
                        .HasColumnName("status");

                    b.HasKey("IdMilitaryOffice");

                    b.HasIndex("IdTown");

                    b.ToTable("military_office");
                });

            modelBuilder.Entity("test.MilitaryRank", b =>
                {
                    b.Property<int>("IdMilitaryRank")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_military_rank");

                    b.Property<string>("NameMilitaryRank")
                        .HasColumnName("name_military_rank");

                    b.HasKey("IdMilitaryRank");

                    b.ToTable("military_rank");
                });

            modelBuilder.Entity("test.MilitaryServiceCategory", b =>
                {
                    b.Property<int>("IdCategoryMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_category_ms");

                    b.Property<string>("NameCategoryMs")
                        .HasColumnName("name_category_ms");

                    b.HasKey("IdCategoryMs");

                    b.ToTable("military_service_category");
                });

            modelBuilder.Entity("test.MilitaryUnit", b =>
                {
                    b.Property<int>("IdMilitaryUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_military_unit");

                    b.Property<int>("IdArea")
                        .HasColumnName("id_area");

                    b.Property<string>("NameMilitaryUnit")
                        .HasColumnName("name_military_unit");

                    b.HasKey("IdMilitaryUnit");

                    b.HasIndex("IdArea");

                    b.ToTable("military_unit");
                });

            modelBuilder.Entity("test.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("test.Models.Pochta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActDate");

                    b.Property<string>("Area");

                    b.Property<string>("Autonom");

                    b.Property<string>("City");

                    b.Property<string>("City1");

                    b.Property<string>("Index");

                    b.Property<string>("IndexOld");

                    b.Property<string>("OPSName");

                    b.Property<string>("OPSSubm");

                    b.Property<string>("OPSType");

                    b.Property<string>("Region");

                    b.HasKey("Id");

                    b.ToTable("Pochta");
                });

            modelBuilder.Entity("test.Nationality", b =>
                {
                    b.Property<int>("IdNationality")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_nationality");

                    b.Property<string>("NameNationality")
                        .HasColumnName("name_nationality");

                    b.HasKey("IdNationality");

                    b.ToTable("nationality");
                });

            modelBuilder.Entity("test.Parent", b =>
                {
                    b.Property<int>("IdParent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_parent");

                    b.Property<int>("IdCity")
                        .HasColumnName("id_city");

                    b.Property<int>("IdFactOfProsecution")
                        .HasColumnName("id_fact_of_prosecution");

                    b.Property<int>("IdParentType")
                        .HasColumnName("id_parent_type");

                    b.Property<int>("IdSex")
                        .HasColumnName("id_sex");

                    b.Property<int>("IdSocialStatus")
                        .HasColumnName("id_social_status");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .HasColumnName("surname");

                    b.HasKey("IdParent");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdFactOfProsecution");

                    b.HasIndex("IdParentType");

                    b.HasIndex("IdSex");

                    b.HasIndex("IdSocialStatus");

                    b.ToTable("parent");
                });

            modelBuilder.Entity("test.ParentType", b =>
                {
                    b.Property<int>("IdParentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_parent_type");

                    b.Property<string>("NameParentType")
                        .HasColumnName("name_parent_type");

                    b.HasKey("IdParentType");

                    b.ToTable("parent_type");
                });

            modelBuilder.Entity("test.PreemptiveRight", b =>
                {
                    b.Property<int>("IdPreemptiveRight")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_preemptive_right");

                    b.Property<string>("NamePreemptiveRight")
                        .HasColumnName("name_preemptive_right");

                    b.HasKey("IdPreemptiveRight");

                    b.ToTable("preemptive_right");
                });

            modelBuilder.Entity("test.ReasonForDeduction", b =>
                {
                    b.Property<int>("IdReasonForDeduction")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_reason_for_deduction");

                    b.Property<string>("NameReasonForDeduction")
                        .HasColumnName("name_reason_for_deduction");

                    b.HasKey("IdReasonForDeduction");

                    b.ToTable("reason_for_deduction");
                });

            modelBuilder.Entity("test.Region", b =>
                {
                    b.Property<int>("IdRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_region");

                    b.Property<int>("IdMilitaryDistrict")
                        .HasColumnName("id_military_district");

                    b.Property<string>("NameRegion")
                        .HasColumnName("name_region");

                    b.HasKey("IdRegion");

                    b.HasIndex("IdMilitaryDistrict");

                    b.HasIndex("NameRegion", "IdMilitaryDistrict")
                        .IsUnique();

                    b.ToTable("region");
                });

            modelBuilder.Entity("test.Sex", b =>
                {
                    b.Property<int>("IdSex")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_sex");

                    b.Property<string>("NameSex")
                        .HasColumnName("name_sex");

                    b.HasKey("IdSex");

                    b.ToTable("sex");
                });

            modelBuilder.Entity("test.SocialBackground", b =>
                {
                    b.Property<int>("IdSocialBackground")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_social_background");

                    b.Property<string>("NameSocialBackground")
                        .HasColumnName("name_social_background");

                    b.HasKey("IdSocialBackground");

                    b.ToTable("social_background");
                });

            modelBuilder.Entity("test.SocialStatus", b =>
                {
                    b.Property<int>("IdSocialStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_social_status");

                    b.Property<string>("NameSocialStatus")
                        .HasColumnName("name_social_status");

                    b.HasKey("IdSocialStatus");

                    b.ToTable("social_status");
                });

            modelBuilder.Entity("test.Speciality", b =>
                {
                    b.Property<int>("IdSpeciality")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_speciality");

                    b.Property<string>("NameSpeciality")
                        .HasColumnName("name_speciality");

                    b.HasKey("IdSpeciality");

                    b.ToTable("speciality");
                });

            modelBuilder.Entity("test.Subject", b =>
                {
                    b.Property<int>("IdSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_subject");

                    b.Property<string>("NameSubject")
                        .HasColumnName("name_subject");

                    b.HasKey("IdSubject");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("test.SubjectMark", b =>
                {
                    b.Property<int>("IdSubject")
                        .HasColumnName("id_subject");

                    b.Property<int>("IdEnrollee")
                        .HasColumnName("id_enrollee");

                    b.Property<int?>("Mark")
                        .HasColumnName("mark");

                    b.HasKey("IdSubject", "IdEnrollee");

                    b.HasIndex("IdEnrollee");

                    b.ToTable("subject_mark");
                });

            modelBuilder.Entity("test.TestType", b =>
                {
                    b.Property<int>("IdTestType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_test_type");

                    b.Property<string>("NameTestType")
                        .HasColumnName("name_test_type");

                    b.HasKey("IdTestType");

                    b.ToTable("test_type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("test.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("test.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("test.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("test.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("test.ApplicationToSpeciality", b =>
                {
                    b.HasOne("test.Enrollee", "IdEnrolleeNavigation")
                        .WithMany("ApplicationToSpeciality")
                        .HasForeignKey("IdEnrollee")
                        .HasConstraintName("r_41");

                    b.HasOne("test.TestType", "IdTestTypeNavigation")
                        .WithMany("ApplicationToSpeciality")
                        .HasForeignKey("IdTestType")
                        .HasConstraintName("r_78");

                    b.HasOne("test.ExamForSpeciality", "Id")
                        .WithMany("ApplicationToSpeciality")
                        .HasForeignKey("IdEntranceExam", "IdSpeciality")
                        .HasConstraintName("r_77");
                });

            modelBuilder.Entity("test.Area", b =>
                {
                    b.HasOne("test.Region", "IdRegionNavigation")
                        .WithMany("Area")
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("r_59");
                });

            modelBuilder.Entity("test.City", b =>
                {
                    b.HasOne("test.Area", "IdAreaNavigation")
                        .WithMany("City")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("r_58");
                });

            modelBuilder.Entity("test.EducationalInstitution", b =>
                {
                    b.HasOne("test.City", "IdTownNavigation")
                        .WithMany("EducationalInstitution")
                        .HasForeignKey("IdTown")
                        .HasConstraintName("r_55");
                });

            modelBuilder.Entity("test.Enrollee", b =>
                {
                    b.HasOne("test.MilitaryServiceCategory", "IdCategoryMsNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdCategoryMs")
                        .HasConstraintName("r_81");

                    b.HasOne("test.EducationType", "IdEducationTypeNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdEducationType")
                        .HasConstraintName("r_68");

                    b.HasOne("test.EducationalInstitution", "IdEducationalInstitutionNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdEducationalInstitution")
                        .HasConstraintName("r_67");

                    b.HasOne("test.FactOfProsecution", "IdFactOfProsecutionNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdFactOfProsecution")
                        .HasConstraintName("r_65");

                    b.HasOne("test.MaritalStatus", "IdMaritalStatusNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdMaritalStatus")
                        .HasConstraintName("r_9");

                    b.HasOne("test.MilitaryOffice", "IdMilitaryOfficeNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdMilitaryOffice")
                        .HasConstraintName("r_17");

                    b.HasOne("test.MilitaryRank", "IdMilitaryRankNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdMilitaryRank")
                        .HasConstraintName("r_80");

                    b.HasOne("test.MilitaryUnit", "IdMilitaryUnitNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdMilitaryUnit")
                        .HasConstraintName("r_79");

                    b.HasOne("test.Nationality", "IdNationalityNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdNationality")
                        .HasConstraintName("r_10");

                    b.HasOne("test.PreemptiveRight", "IdPreemptiveRightNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdPreemptiveRight")
                        .HasConstraintName("r_16");

                    b.HasOne("test.ReasonForDeduction", "IdReasonForDeductionNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdReasonForDeduction")
                        .HasConstraintName("r_31");

                    b.HasOne("test.Sex", "IdSexNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdSex")
                        .HasConstraintName("r_8");

                    b.HasOne("test.SocialBackground", "IdSocialBackgroundNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdSocialBackground")
                        .HasConstraintName("r_6");

                    b.HasOne("test.City", "IdTownNavigation")
                        .WithMany("Enrollee")
                        .HasForeignKey("IdTown")
                        .HasConstraintName("r_52");
                });

            modelBuilder.Entity("test.EnrolleeAchievement", b =>
                {
                    b.HasOne("test.Achievement", "IdAchievementNavigation")
                        .WithMany("EnrolleeAchievement")
                        .HasForeignKey("IdAchievement")
                        .HasConstraintName("r_64");

                    b.HasOne("test.Enrollee", "IdEnrolleeNavigation")
                        .WithMany("EnrolleeAchievement")
                        .HasForeignKey("IdEnrollee")
                        .HasConstraintName("r_63");
                });

            modelBuilder.Entity("test.EnrolleeDocuments", b =>
                {
                    b.HasOne("test.Document", "IdDocumentNavigation")
                        .WithMany("EnrolleeDocuments")
                        .HasForeignKey("IdDocument")
                        .HasConstraintName("r_72");

                    b.HasOne("test.Enrollee", "IdEnrolleeNavigation")
                        .WithMany("EnrolleeDocuments")
                        .HasForeignKey("IdEnrollee")
                        .HasConstraintName("r_71");
                });

            modelBuilder.Entity("test.ExamForSpeciality", b =>
                {
                    b.HasOne("test.EntranceExams", "IdEntranceExamNavigation")
                        .WithMany("ExamForSpeciality")
                        .HasForeignKey("IdEntranceExam")
                        .HasConstraintName("r_73");

                    b.HasOne("test.Speciality", "IdSpecialityNavigation")
                        .WithMany("ExamForSpeciality")
                        .HasForeignKey("IdSpeciality")
                        .HasConstraintName("r_74");
                });

            modelBuilder.Entity("test.Family", b =>
                {
                    b.HasOne("test.Enrollee", "IdEnrolleeNavigation")
                        .WithMany("Family")
                        .HasForeignKey("IdEnrollee")
                        .HasConstraintName("r_45");

                    b.HasOne("test.FamilyType", "IdFamilyTypeNavigation")
                        .WithMany("Family")
                        .HasForeignKey("IdFamilyType")
                        .HasConstraintName("r_1");

                    b.HasOne("test.Parent", "IdParentNavigation")
                        .WithMany("Family")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("r_3");
                });

            modelBuilder.Entity("test.MilitaryOffice", b =>
                {
                    b.HasOne("test.City", "IdTownNavigation")
                        .WithMany("MilitaryOffice")
                        .HasForeignKey("IdTown")
                        .HasConstraintName("r_53");
                });

            modelBuilder.Entity("test.MilitaryUnit", b =>
                {
                    b.HasOne("test.Area", "IdAreaNavigation")
                        .WithMany("MilitaryUnit")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("r_61");
                });

            modelBuilder.Entity("test.Parent", b =>
                {
                    b.HasOne("test.City", "IdCityNavigation")
                        .WithMany("Parent")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("r_50");

                    b.HasOne("test.FactOfProsecution", "IdFactOfProsecutionNavigation")
                        .WithMany("Parent")
                        .HasForeignKey("IdFactOfProsecution")
                        .HasConstraintName("r_66");

                    b.HasOne("test.ParentType", "IdParentTypeNavigation")
                        .WithMany("Parent")
                        .HasForeignKey("IdParentType")
                        .HasConstraintName("r_4");

                    b.HasOne("test.Sex", "IdSexNavigation")
                        .WithMany("Parent")
                        .HasForeignKey("IdSex")
                        .HasConstraintName("r_48");

                    b.HasOne("test.SocialStatus", "IdSocialStatusNavigation")
                        .WithMany("Parent")
                        .HasForeignKey("IdSocialStatus")
                        .HasConstraintName("r_49");
                });

            modelBuilder.Entity("test.Region", b =>
                {
                    b.HasOne("test.MilitaryDistrict", "IdMilitaryDistrictNavigation")
                        .WithMany("Region")
                        .HasForeignKey("IdMilitaryDistrict")
                        .HasConstraintName("r_60");
                });

            modelBuilder.Entity("test.SubjectMark", b =>
                {
                    b.HasOne("test.Enrollee", "IdEnrolleeNavigation")
                        .WithMany("SubjectMark")
                        .HasForeignKey("IdEnrollee")
                        .HasConstraintName("r_70");

                    b.HasOne("test.Subject", "IdSubjectNavigation")
                        .WithMany("SubjectMark")
                        .HasForeignKey("IdSubject")
                        .HasConstraintName("r_35");
                });
#pragma warning restore 612, 618
        }
    }
}
